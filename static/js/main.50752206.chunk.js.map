{"version":3,"sources":["logo.svg","components/card/card.component.jsx","components/card-list/card-list.component.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Card","props","react_default","a","createElement","className","alt","src","concat","monster","id","name","email","CardList","monsters","map","card_component_Card","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","filterRobots","event","setState","filterText","target","value","state","users","_this2","fetch","then","data","json","console","log","seacrhField","filter","toLowerCase","includes","type","onChange","card_list_component_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,2MCI3BC,qBAAO,SAACC,GACjB,OAAQC,EAAAC,EAAAC,cAAA,OAAKC,UAAY,kBACrBH,EAAAC,EAAAC,cAAA,OAAKE,IAAM,UAAUC,IAAG,wBAAAC,OAA0BP,EAAMQ,QAAQC,GAAxC,2BACxBR,EAAAC,EAAAC,cAAA,cAAOH,EAAMQ,QAAQE,MACrBT,EAAAC,EAAAC,cAAA,cAAOH,EAAMQ,QAAQG,UCJhBC,SAAW,SAACZ,GACrB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAY,aACbH,EAAAC,EAAAC,cAAA,UAEQH,EAAMa,SAASC,IAAI,SAAAN,GAAO,OAAKP,EAAAC,EAAAC,cAACY,EAAD,CAAOP,QAAYA,UCiCvDQ,cAnCb,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACXC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAgBFI,aAAe,SAACC,GACZR,EAAKS,SAAS,CAACC,WAAaF,EAAMG,OAAOC,SAhB3CZ,EAAKa,MAAQ,CACXC,MAAQ,GACRJ,WAAa,IAJJV,mFAQM,IAAAe,EAAAZ,KACjBa,MAAM,8CACLC,KAAK,SAAAC,GAAI,OAAKA,EAAKC,SACnBF,KAAK,SAAAH,GACJC,EAAKN,SAAS,CAACK,MAAQA,IACvBM,QAAQC,IAAIP,sCASd,IAAMQ,EAAcnB,KAAKU,MAAMH,WACzBd,EAAWO,KAAKU,MAAMC,MAAMS,OAAO,SAAAhC,GAAO,OAAIA,EAAQE,KAAK+B,cAAcC,SAASH,EAAYE,iBACpG,OACExC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,gCACAF,EAAAC,EAAAC,cAAA,SAAOwC,KAAO,OAAOC,SAAYxB,KAAKI,eACtCvB,EAAAC,EAAAC,cAAC0C,EAAD,CAAUhC,SAAYA,YA7BZiC,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpD,EAAAC,EAAAC,cAACmD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,KAAK,SAAA0B,GACjCA,EAAaC","file":"static/js/main.50752206.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport '../card/card-styles.css';\n\n\nexport const Card = (props) => {\n    return (<div className = 'card-container'>\n        <img alt = 'monster' src={`https://robohash.org/${props.monster.id}?set=set2?sie=180*180`}/>\n        <h2> { props.monster.name }</h2>\n        <h2> { props.monster.email }</h2>\n    </div>)\n}","import React from 'react';\nimport { Card } from '../card/card.component.jsx';\nimport './card-list-styles.css';\n\nexport const CardList = (props) => {\n    return (\n        <div className = 'card-list'>\n            <h1> \n                {\n                    props.monsters.map(monster =>  <Card  monster = { monster }/>)\n                } \n            </h1> \n        </div>\n    )\n}","import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { CardList } from './components/card-list/card-list.component.jsx';\nimport { Search } from './components/search/search-component.jsx';\n\nclass App extends Component{\n  constructor(){\n    super();\n    this.state = {\n      users : [],\n      filterText : ''\n    }\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(data =>  data.json())\n    .then(users =>  {\n      this.setState({users : users});\n      console.log(users);\n    })\n  }\n\n  filterRobots = (event) => {\n      this.setState({filterText : event.target.value});\n  }\n\n  render(){\n    const seacrhField = this.state.filterText;\n    const monsters = this.state.users.filter(monster => monster.name.toLowerCase().includes(seacrhField.toLowerCase()));\n    return (\n      <div className=\"App\">\n        <h1> Monsters Rolodex </h1>\n        <input type = 'text' onChange = {this.filterRobots}/>\n        <CardList monsters = {monsters }></CardList>\n        \n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}